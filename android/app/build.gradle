plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
    id "com.google.gms.google-services"
    id "com.google.firebase.crashlytics"
}

android {
    namespace = "com.nkust.ap.flutter"
    compileSdk = 34
    ndkVersion = flutter.ndkVersion

    compileOptions {
        // Flag to enable support for the new language APIs `flutter_local_notification` required
        coreLibraryDesugaringEnabled true
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId = "com.kuas.ap"
        minSdk = 21
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    signingConfigs {
        release
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            ndk {
                debugSymbolLevel 'FULL'
            }
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    /// Version 10+ `flutter_local_notification` on the plugin now relies on desugaring to support scheduled notifications with backwards compatibility on older versions of Android.
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.2.2'
    /// There have been reports that enabling desugaring may result in a Flutter apps crashing on Android 12L and above
    implementation 'androidx.window:window:1.0.0'
    implementation 'androidx.window:window-java:1.0.0'
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}


def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.canRead()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

    if (keystoreProperties != null) {
        android.signingConfigs.release.storeFile file(keystoreProperties['storeFile'])
        android.signingConfigs.release.storePassword keystoreProperties['storePassword']
        android.signingConfigs.release.keyAlias keystoreProperties['keyAlias']
        android.signingConfigs.release.keyPassword keystoreProperties['keyPassword']
    } else {
        println 'some entries in \'release keystore.properties\' not found!'
    }
} else {
    println '\'release keystore.properties\' not found!'
}